//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/_playerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @_playerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @_playerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""_playerInputs"",
    ""maps"": [
        {
            ""name"": ""_playerMovements"",
            ""id"": ""de1e151a-181c-46cd-805d-0170e5f9d6d0"",
            ""actions"": [
                {
                    ""name"": ""Movements"",
                    ""type"": ""Value"",
                    ""id"": ""b33719fa-ebf8-4223-aa83-1302af5cf2ee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Wasd"",
                    ""id"": ""a10bf3d8-7d11-46fd-914a-f2103b177ffe"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""946d9b7f-05cd-40bc-8448-24a2f464c868"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f506fe7f-0f4f-4044-94b0-4539e9dc56a1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5ac9dbb8-6b57-4078-9baa-722f53079a5a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""01a72d0e-dcdc-426f-a0cb-120924b89dfc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""arrowkeys"",
                    ""id"": ""642d2855-d95b-4307-80f6-1c2a3860859d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4bb1f902-5a2b-4879-bd06-4717776faef6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""304d51e9-adf3-480f-8887-2020f032d4e8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c5ece531-2f1b-4d44-8a81-afad9889b11d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3602aee8-578c-4d48-8a97-f8d71b165a62"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // _playerMovements
        m__playerMovements = asset.FindActionMap("_playerMovements", throwIfNotFound: true);
        m__playerMovements_Movements = m__playerMovements.FindAction("Movements", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // _playerMovements
    private readonly InputActionMap m__playerMovements;
    private List<I_playerMovementsActions> m__playerMovementsActionsCallbackInterfaces = new List<I_playerMovementsActions>();
    private readonly InputAction m__playerMovements_Movements;
    public struct _playerMovementsActions
    {
        private @_playerInputs m_Wrapper;
        public _playerMovementsActions(@_playerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movements => m_Wrapper.m__playerMovements_Movements;
        public InputActionMap Get() { return m_Wrapper.m__playerMovements; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_playerMovementsActions set) { return set.Get(); }
        public void AddCallbacks(I_playerMovementsActions instance)
        {
            if (instance == null || m_Wrapper.m__playerMovementsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__playerMovementsActionsCallbackInterfaces.Add(instance);
            @Movements.started += instance.OnMovements;
            @Movements.performed += instance.OnMovements;
            @Movements.canceled += instance.OnMovements;
        }

        private void UnregisterCallbacks(I_playerMovementsActions instance)
        {
            @Movements.started -= instance.OnMovements;
            @Movements.performed -= instance.OnMovements;
            @Movements.canceled -= instance.OnMovements;
        }

        public void RemoveCallbacks(I_playerMovementsActions instance)
        {
            if (m_Wrapper.m__playerMovementsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(I_playerMovementsActions instance)
        {
            foreach (var item in m_Wrapper.m__playerMovementsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__playerMovementsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public _playerMovementsActions @_playerMovements => new _playerMovementsActions(this);
    public interface I_playerMovementsActions
    {
        void OnMovements(InputAction.CallbackContext context);
    }
}
